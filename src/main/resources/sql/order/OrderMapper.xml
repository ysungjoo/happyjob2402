<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.order.dao.PurchasePaperDao">

	<!-- 발주 지시서 목록 조회 -->
	<select id="selectPurchasePaperList" resultType="kr.happyjob.study.order.model.PurchasePaper">
		SELECT PU.purchase_code AS 'PURCHASE_CODE', 
		       PU.purchase_count AS 'PURCHASE_COUNT', 
		       DATE_FORMAT(PU.purchase_date, '%Y-%m-%d') AS 'PURCHASE_DATE', 
		  	   PR.product_model_name AS 'PRODUCT_MODEL_NAME',
		  	   PR.product_model_number AS 'PRODUCT_MODEL_NUMBER',
			   CO.company_class_name AS 'COMPANY_CLASS_NAME', 
			   PA.owner_approve_yn AS 'OWNER_APPROVE_YN', 
			   PA.deposit_check_yn AS 'DEPOSIT_CHECK_YN' 
		  FROM purchase AS PU
    INNER JOIN product AS PR
		    ON PU.product_code = PR.product_code
    INNER JOIN company AS CO
		    ON PR.company_code = CO.company_code
    INNER JOIN paper AS PA
	     	ON PA.paper_code = PU.paper_code		
    <where>
        <if test="(sname != null) and (!sname.equals(''))">
            <choose>
                <when test="searchKey eq 'pc_unapproved'.toString()">
                    AND owner_approve_yn = 'N'
                    AND (company_class_name LIKE CONCAT ('%', #{sname}, '%') 
                    OR product_model_name LIKE CONCAT ('%', #{sname}, '%'))
                </when>
                <when test="searchKey eq 'pc_approved'.toString()">
                    AND owner_approve_yn = 'Y'
                    AND (company_class_name LIKE CONCAT ('%', #{sname}, '%') 
                    OR product_model_name LIKE CONCAT ('%', #{sname}, '%'))
                </when>
                <otherwise>
                    AND (company_class_name LIKE CONCAT ('%', #{sname}, '%') 
                    OR product_model_name LIKE CONCAT ('%', #{sname}, '%'))
                </otherwise>
            </choose>
        </if>
        <if test="(sname == null) or (sname.equals(''))">
            <choose>
                <when test="searchKey eq 'pc_unapproved'.toString()">
                    AND owner_approve_yn = 'N'
                </when>
                <when test="searchKey eq 'pc_approved'.toString()">
                    AND owner_approve_yn = 'Y'
                </when>
                <otherwise>
                    AND (company_class_name LIKE CONCAT ('%', #{sname}, '%') 
                    OR product_model_name LIKE CONCAT ('%', #{sname}, '%'))
                </otherwise>
            </choose>
        </if>
        <if test="(formerDate != null) and (!formerDate.equals('')) and (latterDate != null) and (!latterDate.equals(''))">
            <choose>
                <when test="searchKey eq 'pc_unapproved'.toString()">
                    AND purchase_date >= #{formerDate}
                    AND #{latterDate} >= purchase_date
                </when>
                <otherwise>
                    AND purchase_date >= #{formerDate}
                    AND #{latterDate} >= purchase_date
                </otherwise>
            </choose>
        </if>
    </where>
		ORDER BY purchase_date DESC
		LIMIT #{pageIndex}, #{pageSize}
	</select>

	<!-- 검색 조건에 맞는 행의 개수를 출력하는 쿼리 -->
<select id="countPurchasePaperList" resultType="int">
    SELECT COUNT(1) AS tot_cnt
    FROM purchase AS PU
    INNER JOIN product AS PR 
        ON PU.product_code = PR.product_code
    INNER JOIN company AS CO 
        ON PR.company_code = CO.company_code
    INNER JOIN paper AS PA 
        ON PA.paper_code = PU.paper_code
    <where>
        <if test="(sname != null) and (!sname.equals(''))">
            <choose>
                <when test="searchKey eq 'pc_unapproved'.toString()">
                    AND owner_approve_yn = 'N'
                    AND (company_class_name LIKE CONCAT ('%', #{sname}, '%') 
                    OR product_model_name LIKE CONCAT ('%', #{sname}, '%'))
                </when>
                <when test="searchKey eq 'pc_approved'.toString()">
                    AND owner_approve_yn = 'Y'
                    AND (company_class_name LIKE CONCAT ('%', #{sname}, '%') 
                    OR product_model_name LIKE CONCAT ('%', #{sname}, '%'))
                </when>
                <otherwise>
                    AND (company_class_name LIKE CONCAT ('%', #{sname}, '%') 
                    OR product_model_name LIKE CONCAT ('%', #{sname}, '%'))
                </otherwise>
            </choose>
        </if>
        <if test="(sname == null) or (sname.equals(''))">
            <choose>
                <when test="searchKey eq 'pc_unapproved'.toString()">
                    AND owner_approve_yn = 'N'
                </when>
                <when test="searchKey eq 'pc_approved'.toString()">
                    AND owner_approve_yn = 'Y'
                </when>
                <otherwise>
                    AND (company_class_name LIKE CONCAT ('%', #{sname}, '%') 
                    OR product_model_name LIKE CONCAT ('%', #{sname}, '%'))
                </otherwise>
            </choose>
        </if>
        <if test="(formerDate != null) and (!formerDate.equals('')) and (latterDate != null) and (!latterDate.equals(''))">
            <choose>
                <when test="searchKey eq 'pc_unapproved'.toString()">
                    AND purchase_date >= #{formerDate}
                    AND #{latterDate} >= purchase_date
                </when>
                <otherwise>
                    AND purchase_date >= #{formerDate}
                    AND #{latterDate} >= purchase_date
                </otherwise>
            </choose>
        </if>
    </where>


</select>

	<!-- 버튼 클릭 시  입금확인여부 변경 -->
	<update id="checkDeposit">
		UPDATE paper a INNER JOIN purchase b
			ON a.paper_code = b.paper_code
		   SET a.deposit_check_yn = 'Y'
		 WHERE b.purchase_code = #{purchaseCode};
	</update>
	
	<!-- 발주지시서 단건 조회 -->
	<select id="selectPurchaseInfo" resultType="kr.happyjob.study.order.model.PurchasePaper">
		SELECT PU.purchase_code AS 'PURCHASE_CODE', 
		       PU.purchase_count AS 'PURCHASE_COUNT', 
		  	   PR.product_model_name AS 'PRODUCT_MODEL_NAME',
			   CO.company_class_name AS 'COMPANY_CLASS_NAME', 
			   PR.product_model_number AS 'PRODUCT_MODEL_NUMBER'
		  FROM purchase AS PU
    INNER JOIN product AS PR
		    ON PU.product_code = PR.product_code
    INNER JOIN company AS CO
		    ON PR.company_code = CO.company_code
		 WHERE purchase_code = #{purchase_code}   
	</select>
	
	<select id="checkDuplicate" resultType="int">
		SELECT COUNT(1) FROM delivery WHERE purchase_code = #{param} 
	</select>
	
	<insert id="startDelivery">
		INSERT 
		  INTO delivery  
				  (
				  	delivery_code
				  , purchase_code
				  , warehouse_code
				  , paper_code
				  , delivery_status
				  )
				  
           VALUES (
		           NULL
		           , #{param}
		           , (SELECT wa.warehouse_code
						FROM purchase pu
				  INNER JOIN product pr
					      ON pu.product_code = pr.product_code
				  INNER JOIN warehouse wa
					      ON wa.warehouse_code = pr.product_code
					   WHERE purchase_code = #{param})
				    ,(SELECT pu.paper_code
						FROM purchase pu
				  INNER JOIN product pr
					      ON pu.product_code = pr.product_code
				  INNER JOIN warehouse wa
						  ON wa.warehouse_code = pr.product_code
					   WHERE purchase_code = #{param})
				   , 0
				)
	</insert>
	<update id="deliveryStartDate">
		UPDATE purchase
		   SET purchase_end_date = NOW()
		 WHERE purchase_code = #{param}
	</update>
	<update id="updatePurchasePaperYn">
		UPDATE order_list
		   SET purchase_paper_yn = 'Y'
		 WHERE purchase_code = #{param};
	</update>


</mapper>