<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.happyjob.study.scm.dao.MainProductInfoDao"> 
  <!-- 제품목록 조회 -->
  <select id="listMainProduct" resultType="kr.happyjob.study.scm.model.MainProductInfoModel"> 
SELECT DISTINCT PD.product_cd as product_cd,
       PD.prod_nm as prod_nm, 
       LC.l_ct_nm as l_ct_nm,
       MC.m_ct_nm as m_ct_nm,
       WH.warehouse_nm as warehouse_nm,
       PD.purchase_price as purchase_price,
       PD.price as price
FROM tb_scm_product PD
LEFT JOIN tb_scm_m_category MC ON MC.m_ct_cd = PD.m_ct_cd
LEFT JOIN tb_scm_l_category LC ON LC.l_ct_cd = MC.l_ct_cd
LEFT JOIN tb_scm_supply SP ON SP.supply_cd = PD.supply_cd
LEFT JOIN tb_scm_warehouse WH ON WH.warehouse_cd = PD.warehouse_cd
    <where>
      <if test="(sname != null) and (!sname.equals(''))">
      <choose>
        <when test= "(oname eq 'all'.toString())">
            AND (PD.prod_nm LIKE concat('%', #{sname}, '%')
             OR  LC.l_ct_nm LIKE concat('%', #{sname}, '%')
             OR  MC.m_ct_nm LIKE concat('%', #{sname}, '%'))
        </when>
        <when test= "(oname eq 'prod_nm'.toString())">
            AND PD.prod_nm LIKE concat('%', #{sname}, '%')
        </when>
        <when test= "(oname eq 'l_ct_nm'.toString())">
            AND LC.l_ct_nm LIKE concat('%', #{sname}, '%')
        </when>
        <when test= "(oname eq 'm_ct_nm'.toString())">
            AND MC.m_ct_nm LIKE concat('%', #{sname}, '%')
        </when>  
      </choose>
      </if> 
    </where>
  ORDER BY PD.enroll_date DESC
     LIMIT #{pageIndex}, #{pageSize}
  </select>
  <!-- 제품목록 카운트 -->
  <select id="totalCntMainProduct" resultType="int"> 
    SELECT DISTINCT COUNT(1)
FROM tb_scm_product PD
LEFT JOIN tb_scm_m_category MC ON MC.m_ct_cd = PD.m_ct_cd
LEFT JOIN tb_scm_l_category LC ON LC.l_ct_cd = MC.l_ct_cd
LEFT JOIN tb_scm_supply SP ON SP.supply_cd = PD.supply_cd
LEFT JOIN tb_scm_warehouse WH ON WH.warehouse_cd = PD.warehouse_cd
<where>
      <if test="(sname != null) and (!sname.equals(''))">
      <choose>
        <when test= "(oname eq 'prod_nm'.toString())">
            AND PD.prod_nm LIKE concat('%', #{sname}, '%')
        </when>
        <when test= "(oname eq 'l_ct_nm'.toString())">
            AND LC.l_ct_nm LIKE concat('%', #{sname}, '%')
        </when>
        <when test= "(oname eq 'm_ct_nm'.toString())">
            AND MC.m_ct_nm LIKE concat('%', #{sname}, '%')
        </when>  
      </choose>
      </if> 
    </where>
  </select>
  
  <!-- 제품정보 관리 조회 -->
    <select id="selectMainProduct" resultType="kr.happyjob.study.scm.model.MainProductInfoModel">
      SELECT PD.product_cd as product_cd,
       PD.prod_nm as prod_nm, 
       LC.l_ct_cd as l_ct_cd,
       MC.m_ct_cd as m_ct_cd,
       SP.supply_cd as supply_cd,
       PD.purchase_price as purchase_price,
       PD.price as price,
       PD.stock as stock,
       PD.detail as detail,
       FL.file_relative_path as file_relative_path
FROM tb_scm_product PD
LEFT JOIN tb_scm_m_category MC ON MC.m_ct_cd = PD.m_ct_cd
LEFT JOIN tb_scm_l_category LC ON LC.l_ct_cd = MC.l_ct_cd
LEFT JOIN tb_scm_supply SP ON SP.supply_cd = PD.supply_cd
LEFT JOIN tb_scm_warehouse WH ON WH.warehouse_cd = PD.warehouse_cd
LEFT JOIN tb_file FL ON PD.product_cd = FL.product_cd
WHERE  PD.product_cd = #{product_cd}
    </select>
 
    <!-- 제품정보 등록 -->
    <insert id="insertMainProduct" parameterType="java.util.Map">    
   INSERT INTO tb_scm_product (
                                product_cd, 
                                prod_nm, 
                                m_ct_cd,
                                supply_cd, 
                                purchase_price, 
                                price, 
                                warehouse_cd, 
                                stock, 
                                detail,
                                enroll_date
                              )
    SELECT #{product_cd},
           #{prod_nm},
           #{m_ct_cd},
           #{supply_cd},
           #{purchase_price}, 
           #{price}, 
           #{warehouse_cd},
           #{stock}, 
           #{detail},
           NOW()                
      FROM DUAL
     WHERE NOT EXISTS(
                      SELECT product_cd 
                        FROM tb_scm_product
                       WHERE product_cd = #{product_cd}
                      );
    INSERT INTO tb_file
                 (
                  file_no, 
                  file_local_path, 
                  file_relative_path, 
                  file_ofname, 
                  file_size,
                  product_cd
                  )
          SELECT  MAX(file_no)+1, 
                  #{file.file_loc}, 
                  #{file.logi}, 
                  #{file.file_nm}, 
                  #{file.file_size},
                  #{product_cd}
                        
            FROM tb_file;
    </insert>
    
    <!-- 제품정보 삭제 -->
    <delete id="deleteMainProduct" parameterType="java.util.Map">
    DELETE 
      FROM tb_scm_product
     WHERE product_cd = #{product_cd}
    
    </delete>
    
    <!-- 제품정보 수정 -->
    <update id="updateMainProduct" parameterType="java.util.Map">
      DELETE 
        FROM tb_file
       WHERE product_cd = #{product_cd};
       
       INSERT INTO tb_file
                (
                 file_no, 
                 file_local_path, 
                 file_relative_path, 
                 file_ofname, 
                 file_size,
                 product_cd
                 )
         SELECT  MAX(file_no)+1, 
                 #{file.file_loc}, 
                 #{file.logi}, 
                 #{file.file_nm}, 
                 #{file.file_size},
                 #{product_cd}
                        
           FROM tb_file;
      
      UPDATE tb_scm_product
         SET prod_nm = #{prod_nm},
             m_ct_cd = #{m_ct_cd},
             supply_cd = #{supply_cd},
             purchase_price = #{purchase_price},
             price = #{price},
             warehouse_cd = #{warehouse_cd},
             detail = #{detail}
       WHERE product_cd = #{product_cd};
       
     
    </update>
    
    <!-- 창고명, 창고코드 조회 -->
    <select id="getWarehouseInfo" resultType="kr.happyjob.study.scm.model.GetWarehouseModel">
      SELECT WH.warehouse_nm as name
            ,WH.warehouse_cd as cd
        FROM tb_scm_warehouse WH
   LEFT JOIN tb_scm_supply SP ON SP.warehouse_cd = WH.warehouse_cd
       WHERE SP.supply_cd = #{selSp}
    </select>
    
       
    <!-- 제품 상세정보 조회 -->
    <select id="mainProductModal" resultType="kr.happyjob.study.scm.model.MainProductModalModel">
      SELECT PD.product_cd as product_cd,
       PD.prod_nm as prod_nm, 
       LC.l_ct_nm as l_ct_nm,
       MC.m_ct_nm as m_ct_nm,
       SP.supply_nm as supply_nm,
       PD.purchase_price as purchase_price,
       PD.price as Price,
       WH.warehouse_nm as warehouse_nm,
       PD.stock as stock,
       PD.detail as detail,
       FL.file_relative_path as file_relative_path
FROM tb_scm_product PD
LEFT JOIN tb_scm_m_category MC ON MC.m_ct_cd = PD.m_ct_cd
LEFT JOIN tb_scm_l_category LC ON LC.l_ct_cd = MC.l_ct_cd
LEFT JOIN tb_scm_supply SP ON SP.supply_cd = PD.supply_cd
LEFT JOIN tb_scm_warehouse WH ON WH.warehouse_cd = PD.warehouse_cd
LEFT JOIN tb_file FL ON PD.product_cd = FL.product_cd
WHERE  PD.product_cd = #{product_cd}
    </select>
    
  </mapper>