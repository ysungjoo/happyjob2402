<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<<<<<<< HEAD
<mapper namespace="kr.happyjob.study.scm.dao.WarehouseInfoDao"> <!--DAO파일이 위치한 디렉터리와 매핑 (내 담당 DAO는 누구이다.) -->
  <!-- 창고 조회 -->
  <select id="listWarehouse" resultType="kr.happyjob.study.scm.model.WarehouseInfoModel"> <!--id=DAO가 호출할 별명 작성 , resultType 반환 값을 담을 model의 디렉터리와 매핑 -->
    SELECT DISTINCT WH.warehouse_cd as warehouse_cd, 
                    WH.warehouse_nm as warehouse_nm, 
                    UI.name as wh_mng_nm, 
                    UI.tel as tel, 
                    UI.mail as email, 
                    WH.zip_cd as zip_cd, 
                    WH.addr as addr,
                    WH.addr_detail as addr_detail
      FROM tb_scm_warehouse WH 
 LEFT JOIN tb_userinfo UI 
        ON WH.wh_mng_id = UI.loginID
     WHERE WH.use_yn="Y"
      <if test="(sname != null) and (!sname.equals(''))">
      <choose>
        <when test="oname eq 'all'.toString()">
            AND (WH.warehouse_nm LIKE CONCAT('%', #{sname}, '%')            
                 or UI.name LIKE CONCAT('%', #{sname}, '%')
                )
        </when>
        <when test= "(oname eq 'warehouse_nm'.toString())">
            AND WH.warehouse_nm LIKE concat('%', #{sname}, '%')
        </when> 
        <when test= "(oname eq 'wh_mng_nm'.toString())">
            AND UI.name LIKE concat('%', #{sname}, '%')
        </when>
      </choose>
      </if> 
  ORDER BY WH.enroll_date DESC
     LIMIT #{pageIndex}, #{pageSize}
  </select>
  <!-- 창고 카운트 -->
  <select id="totalCntWarehouse" resultType="int"> 
    SELECT DISTINCT COUNT(*) as total_cnt
      FROM tb_scm_warehouse WH 
 LEFT JOIN tb_userinfo UI 
        ON WH.wh_mng_id = UI.loginID
     WHERE WH.use_yn="Y"  
        <choose>
        <when test="oname eq 'all'.toString()">
            <!-- AND (WH.warehouse_nm LIKE CONCAT('%', #{sname}, '%') or UI.name LIKE CONCAT('%', #{sname}, '%')) -->
            AND (WH.warehouse_nm LIKE CONCAT('%', #{sname}, '%')
                 or UI.name LIKE CONCAT('%', #{sname}, '%')
                )
        </when>
        <when test= "(oname eq 'warehouse_nm'.toString())">
            AND WH.warehouse_nm LIKE concat('%', #{sname}, '%')
        </when>
        <when test= "(oname eq 'wh_mng_nm'.toString())">
            AND UI.name LIKE concat('%', #{sname}, '%')
        </when>
      </choose>
  </select>
  
  <!-- 제품 조회 -->
  <select id="listWarehouseProduct" resultType="kr.happyjob.study.scm.model.WarehouseInfoModel">
   SELECT DISTINCT WH.warehouse_nm as warehouse_nm,
                   PD.product_cd as product_cd, 
                   PD.prod_nm as prod_nm , 
                   LC.l_ct_nm as l_ct_nm , 
                   SP.supply_nm as supply_nm , 
                   PD.stock as stock 
     FROM tb_scm_product PD
     LEFT JOIN tb_scm_warehouse WH ON PD.warehouse_cd = WH.warehouse_cd
     LEFT JOIN tb_scm_supply SP ON SP.supply_cd = PD.supply_cd 
     LEFT JOIN tb_scm_m_category MC ON MC.m_ct_cd = PD.m_ct_cd 
     LEFT JOIN tb_scm_l_category LC ON LC.l_ct_cd = MC.l_ct_cd
    WHERE WH.warehouse_nm = #{warehouse_nm}
      AND WH.warehouse_cd = #{warehouse_cd}
 ORDER BY  PD.enroll_date DESC
    LIMIT #{pageIndex}, #{pageSize}
  </select>
  <!-- 제품 카운트 -->
  <select id="totalCntProduct" resultType="int">
  SELECT DISTINCT COUNT(*) as total_cnt
    FROM tb_scm_product PD
    LEFT JOIN tb_scm_warehouse WH ON PD.warehouse_cd = WH.warehouse_cd
    LEFT JOIN tb_scm_supply SP ON SP.supply_cd = PD.supply_cd 
    LEFT JOIN tb_scm_m_category MC ON MC.m_ct_cd = PD.m_ct_cd 
    LEFT JOIN tb_scm_l_category LC ON LC.l_ct_cd = MC.l_ct_cd
   WHERE PD.warehouse_cd = #{warehouse_cd} 
  </select>
  
  
  <!-- 창고 단건 조회 -->
  <select id="selectWarehouse" resultType="kr.happyjob.study.scm.model.WarehouseInfoModel">
    SELECT warehouse_cd,
           warehouse_nm,
           wh_mng_id,
           zip_cd,
           addr,
           addr_detail 
      FROM tb_scm_warehouse
     WHERE warehouse_cd = #{warehouse_cd}
  </select>
  
  <!-- 창고 등록 -->
  <insert id="insertWarehouse" parameterType="java.util.Map">
   INSERT INTO tb_scm_warehouse (
                                warehouse_cd, 
                                warehouse_nm, 
                                wh_mng_id, 
                                zip_cd, 
                                addr, 
                                addr_detail,
                                use_yn,
                                enroll_date
                              )
    SELECT #{warehouse_cd},
           #{warehouse_nm},
           #{wh_mng_id},
           #{zip_cd},
           #{addr},
           #{addr_detail},
           'Y',
           NOW()                 
      FROM DUAL
     WHERE NOT EXISTS(
                      SELECT warehouse_cd 
                        FROM tb_scm_warehouse 
                       WHERE warehouse_cd = #{warehouse_cd}
                      )
  </insert>
  
  
  <!-- 창고 수정 -->
<update id="updateWarehouse" parameterType="java.util.Map">
  UPDATE tb_scm_warehouse 
  SET  warehouse_nm = #{warehouse_nm}
     , wh_mng_id = #{wh_mng_id}
     , zip_cd = #{zip_cd}
     , addr = #{addr}
     , addr_detail = #{addr_detail}
  WHERE warehouse_cd = #{warehouse_cd}
</update>

  <!-- 창고 삭제 -->
  <delete id="deleteWarehouse" parameterType="java.util.Map">
    DELETE
    FROM tb_scm_warehouse 
    WHERE warehouse_cd = #{warehouse_cd}
    AND (
          SELECT COUNT(*) 
          FROM tb_scm_product 
          WHERE warehouse_cd = #{warehouse_cd}
        ) = 0
    AND (
          SELECT COUNT(*)
          FROM tb_scm_supply
          WHERE warehouse_cd = #{warehouse_cd}
        ) = 0
  </delete>
  
=======

<mapper namespace="kr.happyjob.study.scm.dao.WarehouseInfoDao">


	<!-- 창고조회 -->
	<select id="listWarehouse" resultType="kr.happyjob.study.scm.model.WarehouseInfoModel">
		SELECT
			warehouse_name,
			warehouse_code,
			manager_name,
			manager_email,
			manager_phone,
			warehouse_address
		FROM
			warehouse
	</select>
	
	
	<!-- 창고상세조회 -->
	<select id="detailWarehouse" resultType="kr.happyjob.study.scm.model.WarehouseInfoModel">
		SELECT
			warehouse_name,
			warehouse_code,
			manager_name,
			manager_email,
			manager_phone,
			warehouse_post_code,
			warehouse_address,
			warehouse_address_detail
		FROM
			warehouse
		WHERE 
		    warehouse_code = #{warehouse_code}
	</select>


    <!-- 창고검색 -->
	<select id="searchWarehouse" parameterType="hashMap" resultType="kr.happyjob.study.scm.model.WarehouseInfoModel">
	    SELECT
	        warehouse_name,
	        warehouse_code,
	        manager_name,
	        manager_email,
	        manager_phone,
	        warehouse_address
	    FROM
	        warehouse
	    <where>
	    	<if test="(sname != null) and (!sname.equals(''))">
				<choose>
					<when
						test="searchKey eq 'warehouse_name'.toString()">
						AND warehouse_name Like CONCAT('%', #{sname}, '%')
					</when>
					<when
						test="searchKey eq 'warehouse_address'.toString()">
						AND warehouse_address LIKE CONCAT('%', #{sname}, '%')
					</when>
				</choose>
			</if>
		</where>
</select>
	  

    <!-- 창고등록 -->
	<insert id="insertWarehouse">
		INSERT INTO warehouse (       warehouse_inout
		                            , product_code
									, warehouse_code
									, warehouse_name
									, manager_name
									, manager_email
									, manager_phone
									, warehouse_post_code
									, warehouse_address
									, warehouse_address_detail

						) VALUES (
                                      #{warehouse_inout}
                                    , #{product_code}
								    , #{warehouse_code}
									, #{warehouse_name}
									, #{manager_name}
									, #{manager_email}
									, #{manager_phone}
									, #{warehouse_post_code}
									, #{warehouse_address}
									, #{warehouse_address_detail}
								)
	</insert>
	

	<!-- 창고수정 -->
	<update id="updateWarehouse">
		UPDATE
		    warehouse
		SET 
		    warehouse_name = #{warehouse_name},
			manager_name= #{manager_name},
			manager_email= #{manager_email},
			manager_phone= #{manager_phone},
			warehouse_address = #{warehouse_address}
		WHERE
		    warehouse_code = #{warehouse_code}
	</update>
	

	<!-- 창고삭제 -->
	<delete id="deleteWarehouse">
		DELETE FROM warehouse
		WHERE warehouse_code = #{warehouse_code}
	</delete>

>>>>>>> 45ba225372f4b960add5e991dc88b6d49f945ef8

</mapper>