<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.login.dao.LoginDao">
   
   <!-- 사용자 로그인 체크 -->
   <select id="checkLogin" resultType="String">
      /*kr.kosmo.jobkorea.login.dao.LoginDao.checkLogin*/
            SELECT  user_Type
              FROM    tb_userinfo 
            WHERE   loginID = #{lgn_Id}
               AND  password = #{pwd}
     </select>
     
   
   <!-- 사용자 로그인 -->
   <select id="selectLogin" resultType="kr.happyjob.study.login.model.LgnInfoModel">
      /*kr.happyjob.study.login.dao.LoginDao.selectLogin*/
      SELECT  loginID as lgn_id
               , name as usr_nm
               , user_Type as mem_author
               ,approval_cd as approval_cd
      FROM tb_userinfo 
     WHERE loginID = #{lgn_Id}
        AND password = #{pwd}
        AND del_cd="n"
     </select>
     
     <!-- 사용자 로그인 LoginService2용 -->
     <select id="loginUser" parameterType="hashMap" resultType="kr.happyjob.study.login.model.dto.LoginDto">
     	/* kr.happyjob.study.login.dao.LoginDao.loginUser - LoginService2용*/
     	
     	SELECT 	
     		user_id as loginID,
     		user_name,
     		user_type
     	FROM user
     	WHERE 
     		user_id = #{lgn_Id} 
     		AND user_password = #{pwd}
     		AND delete_yn="n";
     </select>
     
     
<!-- 사용자 메뉴 권한 -->
   <select id="listUsrMnuAtrt" resultType="kr.happyjob.study.login.model.UsrMnuAtrtModel">
         /*kr.happyjob.study.login.dao.LoginDao.listUsrMnuAtrt*/
            SELECT  ta.mnu_id
                  ,   ta.hir_mnu_id
                  ,   ta.mnu_nm
                  ,   ta.mnu_url
                  ,   ta.mnu_dvs_cod
                  ,   ta.grp_num
                  ,   ta.odr
                  ,   ta.lvl
                  ,   ta.mnu_ico_cod
               FROM  tm_mnu_mst ta
               WHERE EXISTS (
                             SELECT  1
                             FROM  tn_usr_mnu_atrt tb
                             WHERE ta.mnu_id = tb.mnu_id
                                  AND tb.user_type = #{userType}
                           )
                  AND ta.lvl=0
               ORDER BY ta.odr
     </select>
     
    <!-- 사용자 자식 메뉴 권한 -->
   <select id="listUsrChildMnuAtrt" resultType="kr.happyjob.study.login.model.UsrMnuChildAtrtModel">
      /*kr.happyjob.study.login.dao.LoginDao.listUsrChildMnuAtrt*/
         SELECT  ta.mnu_id
               ,   ta.hir_mnu_id
               ,   ta.mnu_nm
               ,   ta.mnu_url
               ,   ta.mnu_dvs_cod
               ,   ta.grp_num
               ,   ta.odr
               ,   ta.lvl
               ,   ta.use_poa
               ,   ta.dlt_poa
         FROM  tm_mnu_mst ta
         WHERE EXISTS (
                          SELECT  1
                            FROM  tn_usr_mnu_atrt tb
                          WHERE ta.mnu_id = tb.mnu_id
                               AND tb.user_type = #{userType}
                     )
            AND ta.lvl=1
            AND hir_mnu_id = #{hir_mnu_id}
         ORDER BY ta.odr
     </select>
     
     <!-- 사용자 메뉴 권한 - LoginService2용 -->
     <select id="listUserMenu" parameterType="hashMap" resultType="kr.happyjob.study.login.model.dto.UserMenuDto">
     	/*kr.happyjob.study.login.dao.LoginDao.listUserMenu - LoginService2용 */
     	
     	SELECT
			ta.mnu_id AS menu_id,
			ta.hir_mnu_id AS parent_menu_id,
    		ta.mnu_nm AS menu_name,
    		ta.mnu_url AS menu_url,
    		ta.mnu_dvs_cod AS menu_code,
    		ta.grp_num AS group_number,
    		ta.odr AS menu_sequence,
    		ta.lvl AS menu_level,
    		ta.mnu_ico_cod AS menu_icon_code
		FROM
			tm_mnu_mst ta
		WHERE EXISTS (
				SELECT 1
        		FROM tn_usr_mnu_atrt tb
        		WHERE ta.mnu_id = tb.mnu_id
        		AND tb.user_type = #{user_type}
			)
		AND ta.lvl = 0
		ORDER BY ta.odr;
     	
     </select>
     
  	<!-- 사용자 메뉴 자식 권한 - LoginService2용 -->
     <select id="listUserChildMenu" resultType="kr.happyjob.study.login.model.dto.UserMenuChildDto">
    	 /*kr.happyjob.study.login.dao.LoginDao.listUserChildMenu - LoginService2용 */
    	 SELECT
			ta.mnu_id as menu_id,
    		ta.mnu_nm as menu_name,
    		ta.mnu_url as menu_url,
    		ta.mnu_dvs_cod as menu_code,
    		ta.grp_num as group_number,
    		ta.odr as menu_sequence,
    		ta.lvl as menu_level
		FROM
			tm_mnu_mst ta
		WHERE EXISTS 
			(	
				SELECT 1
        		FROM
					tn_usr_mnu_atrt tb
				WHERE
					ta.mnu_id = tb.mnu_id
            		AND tb.user_type = #{user_type}
			)
		AND ta.lvl = 1
		AND ta.hir_mnu_id = #{parent_menu_id}
		ORDER BY ta.odr;
     </select>
     
<!--      tb.userinfo 테이블 회원가입 -->
<!--      <insert id="registerUser" parameterType="java.util.Map"> -->
<!--      /*kr.happyjob.study.login.dao.LoginDao.registerUser*/ -->
<!--      INSERT INTO tb_userinfo( -->
<!--      						loginID,	 -->
<!--      						user_type,	 -->
<!--      						name,	 -->
<!--      						password, -->
<!--      						tel, -->
<!--      						mail, -->
<!--      						zip_code, -->
<!--      						addr, -->
<!--      						addr_detail, -->
<!--      						account, -->
<!--      						bank, -->
<!--      						del_cd ) VALUES ( -->
<!--      								#{loginID}, -->
<!-- 									#{user_type}, -->
<!-- 									#{user_name}, -->
<!-- 									#{password},   -->
<!-- 									#{tel}, -->
<!-- 									#{mail}, -->
<!-- 									#{zip_code},   -->
<!-- 									#{addr},   -->
<!-- 									#{addr_detail}, -->
<!-- 	     							#{account}, -->
<!-- 	     							#{bank}, -->
<!-- 	     							#{del_cd}); -->
   	
<!--    		</insert> -->

	<!--  user 테이블 회원가입 -->
     <insert id="registerUser" parameterType="java.util.Map">
     /*kr.happyjob.study.login.dao.LoginDao.registerUser*/
     INSERT INTO user(		
     			user_id,	
     			user_password,	
     			user_type,
     			company_code,
     			company_name,
     			user_name,
     			phone_number,
     			email,
     			post_code,
     			user_address,
     			user_address_detail,
     			bank_name,
     			account_number,
     			account_holder,
     			delete_yn,
     			create_date
     			) 
     			VALUES 
     			(
     				#{loginID},
     				#{password},
					#{userType},
					"0",
					3,
					#{company_name},
					#{user_name},
					#{tel},
					#{mail},
					#{zip_code},  
					#{addr},  
					#{addr_detail},
					#{bank},
   					#{account},
   					#{account_holder},
   					#{del_cd},
   					now()
   				);
   	
   	</insert>
     
     <insert id="registerCtminfo" parameterType="java.util.Map">
      /*kr.kosmo.jobkorea.login.dao.LoginDao.registerCtminfo*/
      INSERT INTO tb_userinfo (
      							company_cd
      						,	loginID
     						,	company_mng
     						,	account_holder
     						,	active
     						) VALUES (
     								#{company_cd}
	     						,	#{loginID}
	     						,	#{company_mng}
	     						,	#{account_holder}
	     						,	#{active}
     						)
     
     </insert>
     
     <!-- 중복 검사  loginID 중복검사 -->
	<select id="check_loginID" parameterType="String" resultType="int">
		SELECT count(*)
		FROM tb_userinfo
		WHERE loginID = #{loginID}
	</select>
	
	<!-- LoginService2 중복 검사  loginID 중복검사 -->
	<select id="validate_loginID" parameterType="String" resultType="int">
		SELECT count(*)
		FROM user
		WHERE user_id = #{loginID}
	</select>
	
	
     <!-- 사용자 ID 찾기 -->
      <select id="selectFindId" resultType="kr.happyjob.study.login.model.LgnInfoModel">
      /*kr.happyjob.study.login.dao.LoginDao.selectFindId*/
      SELECT  u.loginID as loginID
      	  ,	  u.mail as user_email
      FROM    tb_userinfo as u
      WHERE   u.del_cd ="n"
      AND	  u.mail = #{user_email}
     </select>

      
     <!-- 사용자 PW 찾기 -->
     <select id="selectFindPw" resultType="kr.happyjob.study.login.model.LgnInfoModel">
      /*kr.happyjob.study.login.dao.LoginDao.selectFindPw*/
      SELECT  u.loginID as loginID
      	  ,   u.password as password
      	  ,	  u.user_email as user_email
      FROM    tb_userinfo as u
      WHERE   u.del_cd ="n"
      AND	  u.user_email = #{user_email}
      AND 	  u.loginID = #{loginID}
     </select>

     
     <!-- 사용자 PW 찾기 ID 체크-->
     <select id="registerIdCheck" resultType="kr.happyjob.study.login.model.LgnInfoModel">
     SELECT     u.loginID as loginID
     FROM    	tb_userinfo as u
     WHERE   	u.del_cd ="n"
     AND 	  	u.loginID = #{loginID}
     </select>  
     
     
     <!-- 이력서 파일 업로드 -->
     <insert id="insertUserinfoFile">
	     insert into tb_userinfoFile (
			  uf_title,uf_contents,uf_cnt,file_nm,file_loc,file_size,enr_user,enr_date,upd_user,upd_date
			)select
			  ,#{uf_title}  <!-- qna_title - IN varchar(50) -->
			  ,#{uf_contents}   <!-- qna_contents - IN varchar(50)-->
			  ,0    <!-- qna_cnt - IN int(11) -->
			  ,#{fileInfo.file_nm}   <!-- file_nm - IN varchar(50) -->
			  ,#{fileInfo.file_loc}  <!--  file_loc - IN varchar(50) -->
			  ,#{fileInfo.file_size}   <!-- file_size - IN varchar(50) -->
			  ,#{enr_user}   <!-- enr_user - IN varchar(20) -->
			  ,DATE_FORMAT(NOW(),'%Y-%c-%d %T' )  <!--  enr_date - IN date -->
			  ,#{upd_user}   <!-- upd_user - IN varchar(20) -->
			  ,DATE_FORMAT(NOW(),'%Y-%c-%d %T' )   <!--  upd_date - IN date -->
			from tb_userinfoFile
	</insert>
	
	<select id="getDirectory" resultType="String">
		select concat('F', date_format(now(),'%y%m%d')) AS dirPath
	</select>
	
	<update id="updateUserinfoFile">
		update tb_userinfoFile SET
		   qna_title = #{qna_title} <!-- varchar(50) -->
		  ,qna_contents =  concat(DATE_FORMAT(NOW(),'%Y-%c-%d %T' ),'- 수정됨 \n',#{qna_contents}) <!-- varchar(50) -->
		  ,file_nm = #{file_nm} <!-- varchar(50) -->
		  ,file_loc = #{file_loc}  <!--  varchar(50) -->
		  ,file_size = #{file_size}  <!-- varchar(50) -->
		  ,upd_user = #{loginID} <!-- varchar(20) -->
		  ,upd_date = DATE_FORMAT(NOW(),'%Y-%c-%d %T' )  <!-- date -->
		WHERE qna_seq = #{qna_seq} <!--  varchar(20) -->
	
	</update>

</mapper>